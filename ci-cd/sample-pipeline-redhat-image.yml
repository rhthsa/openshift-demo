# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  trivyVersion: 0.15.0

steps:

- task: DotNetCoreCLI@2
  displayName: 'restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: 'a9304c9c-ddfc-4a30-90ca-6770b0340d97/7211ac46-18cb-43bd-8a66-434bfd2bd9c1'
    includeNuGetOrg: true

- task: DotNetCoreCLI@2
  displayName: 'build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--no-restore -c Release'

- task: DotNetCoreCLI@2
  displayName: 'publish'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    arguments: '--no-restore -c Release'
    zipAfterPublish: false

- task: Bash@3
  displayName: 'get red hat image'
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      
      /usr/bin/docker login -u='13443152|a62629' -p=eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiI2MjVjODI3NzQwNGY0YWFiOGMyZDhmNTk0NzBhNWVjZiJ9.l-B556Id9LZmoegZmaFTm2GVgoTmCWeFehMQUkHTmK7hZyTo1qVJu4DNTGeNBnFtb9FT0p8wNyCEOEYS_cwMGT2Y6ZbFq-tm5Qf8CiQSg41TlJ88nPRLCIwdc2JPlhtSmcOb9NWmBIP2iKDBBI1zUyZbNxW_arv4fplGXr1AuZUPECvQMWuQnuNVh4dvZYsfDWYstO8APsZuTtvytA2tdlFanqRiHWVRynGH_uEGni-1slSRqH2nP1cLuD_RG9GcxHDaDhv6OziEezCp-_nzyy3CmFxVCxRGYLsfpmLR0HGN9BzGM8gT1mAynV0Fv_vORjHP-OhcIPr-DwJ666d0EN1dSjC7diteR5NVzzEtb-KTTaDnJcrhuxLO7aC5f4lQqHMq440MMzwZkzRDefQSTzH_bMUD82VaQG8lPgPry8Xy3k0rmpBSeLjiKgwJMDcjputtJ2dv9AOgQXswt1QQZaEy9cLmDu9-X9F3adWQ_-v3DkuYqPlvV-Li3Qwcw5Xk7A5Ip9ox4XtX4Af4rGELzE9VhUvYaYwfDaY5gMeiH7E6nN47mOfKwHXzmzSIN-Aj20mMSQhXBNC1LZKKK6Kn_yC-NGz2WvukS252d6okJY7RaEJe-kNFbhZx-P3Jp162btNntDWzjauPQmeGsKySTikmouRLmbW3sTa1FPJIGBE registry.redhat.io
      /usr/bin/docker pull registry.redhat.io/ubi8/dotnet-31-runtime
      
- task: Docker@2
  displayName: 'build image'
  inputs:
    containerRegistry: 'internal'
    repository: 'bot/demoapp'
    command: 'build'
    Dockerfile: '**/app/Dockerfile'
    buildContext: '/home/vsts/work/1/s/app/bin/Release/netcoreapp3.1/publish/'
    tags: '$(Build.BuildNumber)'

- task: Bash@3
  displayName: 'install trivy'
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here

      sudo apt-get install rpm
      wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
      sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
      trivy -v

- task: Bash@3
  displayName: 'scan image with trivy'
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here

      #trivy image --exit-code 0 --severity LOW,MEDIUM --format template --template "@templates/junit.tpl" -o junit-report-low-med.xml default-route-openshift-image-registry.apps.cluster-852b.852b.example.opentlc.com/bot/demoapp:$(Build.BuildNumber)
      trivy image --exit-code 0 --severity HIGH,CRITICAL --format template --template "@templates/junit.tpl" -o junit-report-high-crit.xml default-route-openshift-image-registry.apps.cluster-852b.852b.example.opentlc.com/bot/demoapp:$(Build.BuildNumber)

# - task: PublishTestResults@2
#   inputs:
#     testResultsFormat: 'JUnit'
#     testResultsFiles: '**/junit-report-low-med.xml'
#     mergeTestResults: false
#     failTaskOnFailedTests: false
#     testRunTitle: 'Trivy - Low and Medium Vulnerabilities'
#   condition: 'always()'   

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit-report-high-crit.xml'
    mergeTestResults: false
    failTaskOnFailedTests: false
    testRunTitle: 'Trivy - High and Critical Vulnerabilities'
  condition: 'always()'       

- task: oc-setup@2
  displayName: 'connect openshift'
  inputs:
    connectionType: 'OpenShift Connection Service'
    openshiftService: 'openshift'
    version: '4.4'

# - task: Bash@3
#   displayName: 'push image to openshift'
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your commands here
      
#       /usr/bin/docker login -u opentlc-mgr -p $(oc whoami -t) default-route-openshift-image-registry.apps.cluster-852b.852b.example.opentlc.com
#       /usr/bin/docker push default-route-openshift-image-registry.apps.cluster-852b.852b.example.opentlc.com/bot/demoapp:$(Build.BuildNumber)

