# https://github.com/maistra/istio-operator/blob/maistra-2.0/pkg/apis/maistra/v2/smcp_new.yaml
# https://github.com/maistra/istio-operator/blob/maistra-2.3.0/pkg/apis/maistra/v2/smcp_new.yaml
# https://github.com/maistra/istio-operator/blob/maistra-2.4/pkg/apis/maistra/v2/smcp_new.yaml
apiVersion: maistra.io/v2
kind: ServiceMeshControlPlane
metadata:
  name: basic
spec:
  version: v2.3  # Change this to match your OSSM Version
  tracing:
    sampling: 10000 # scaled integer, 0-100% in 0.01% increments, i.e. 1=.001%, 100=1%, 10000=100%
    type: Jaeger
  proxy:
    networking:
      trafficControl:
        outbound:
          policy: ALLOW_ANY # Change to REGISTRY_ONLY to block by default
    accessLogging:
      # both may be specified
      file:
        name: /dev/stdout # file name
        encoding: TEXT # TEXT or JSON
        # format: cutom-format # format for log messages
      # envoySerivce:
      #   enabled: false
  security:
    dataPlane:
      mtls: false
      automtls: false
    controlPlane:
      mtls: false
  policy:
    type: Istiod # or Mixer or Remote, Mixer is default for pre v2.0
  telemetry:
    type: Istiod
  gateways:
    openshiftRoute:
      enabled: true
    ingress:
      routeConfig: # specifies whether to create an OpenShift Route for istio-ingressgateway
        enabled: true
      runtime:
        container:
          resources:
            requests:
              cpu: 10m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
        deployment:
          autoScaling:
            maxReplicas: 4
            minReplicas: 2
            targetCPUUtilizationPercentage: 80
            enabled: true
          #   podDisruption:
          #     enabled: false
          #   pod:
          #     tolerations:
          #     - key: node.kubernetes.io/unreachable
          #       operator: Exists
          #       effect: NoExecute
          #       tolerationSeconds: 60
        # service:
        #   type: ClusterIP
    egress:
        enabled: false
  general:
    logging:
      # componentLevels:
      #   default: info
      logAsJSON: false
    validationMessages: false
  addons:
    grafana:
      enabled: true
    jaeger:
      install:
        storage:
          type: Memory
    kiali:
      enabled: true
    prometheus:
      enabled: true
  runtime:
    defaults:
      deployment: {}
      pod:
        tolerations:
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 60
      container:
        # imageRegistry: registry.redhat.io # old global.hub
        # imageTag: "2.0" # old global.tag
        imagePullPolicy: Always
        # imagePullSecrets:
        # - name: registry-token-secret
        # resources: # old global.defaultResources
        #   limits: {}
        #   requirements: {}
    components:
      pilot:                   
        deployment:
          replicas: 2
      prometheus:                   
        deployment:
          replicas: 2
      tracing.jaeger.allInOne:                   
        deployment:
          replicas: 1

#### Annotation for Prometheus - OSSM 2.0
# prometheus.io/path: /metrics
# prometheus.io/port: "8080"
# prometheus.io/scrape: "true"
# prometheus.istio.io/merge-metrics: "true"
# sidecar.istio.io/inject: "true"
# traffic.sidecar.istio.io/excludeInboundPorts: "15020"

#### Annotation for Prometheus - OSSM 2.1
# prometheus.io/path: /metrics
# prometheus.io/port: "8080"
# prometheus.io/scrape: "true"
# sidecar.istio.io/inject: "true"

#### Update Network Policy 
# cat << EOF |oc apply -f -
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: user-workload-access
#   namespace: bookinfo
# spec:
#   ingress:
#   - from:
#     - namespaceSelector:
#         matchLabels:
#           network.openshift.io/policy-group: monitoring
#   podSelector: {}
#   policyTypes:
#   - Ingress
# EOF
